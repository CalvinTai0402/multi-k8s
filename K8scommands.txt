MINIKUBE

-To initialize minikube run: minikube start --vm-driver hyperv --hyperv-virtual-switch "Minikube Switch"

K8s COMMANDS


kubectl apply -f <filename>																			*To apply configs/update the desired state of the master
kubectl get pv																						*To see persistent volume
kubectl get pods																					*To see pods
kubectl get services																				*To see services, under PORT(S), we have <port>:<nodePort>
kubectl get deployments																				*To see deployments
kubectl get pods -o wide																			*The IP here is the IP of the pod
minikube ip																							*To get ip address of VM, access the pod from browser doing <VM ip>:<nodePort>
kubectl delete svc <service-name>																	*To delete a service
kubectl delete pods <pod-name>																		*To delete a pod
kubectl delete deployment <deployment-name>
kubectl delete -f <file>																			*To delete the object with the name and kind specified in the config file
kubectl describe <object type> <object name>														*Usually look at the Events section
kubectl set image <object_type>/<object_name> <container_name>=<new image to use>					*To use an updated image
eval $(minikube docker-env)																			*To TEMPORARILY (not persistent) configure docker cli to connect to minikube VMs instead of localhost
kubectl get storage class																			*To see the storage classes available
kubectl create secret generic <secret_name> --from-literal key=value								*Create a password imperatively, usually used when we don't want to have the password written in a cfg file for everyone to see


MASTER


- To deploy, we update the desired state of the master with a config file.
- The master works constantly to meet the desired state.
- Whena config file is updated, master goes and look for the object using the "name" and the "kind" of the cfg file and updates it.




GENERAL


- Kubernetes is a system to deploy containerized apps
- Kubernetes do NOT build images. Instead, it expects them to be built and it just pulls them from, usually, Docker hub.
- A cluster consists of at least one cluster master and multiple worker machines called nodes
- Minikube sets up the VM
- Kubectl is the CLI to interact with K8s
- A controller is something that constantly works to get the current state of an object to the desired state.
- A node is a VM/bare-metal pc
- There are objects in K8s, including: StatefulSet, ReplicaController, Pod, Service, Deployment, Volume, Secrets
- A pod runs inseparable/work-atomicly container(s)
- Service does networking for a cluster. Four subtypes:
	i)		NodePort: Exposes a container to the outside world.
				- port: allows other pods access to the desired pod
				- targetPort: maps to the desired pod
				- nodePort: maps to outside world. (This is the port you use to access the app from a browser)
	ii)		ClusterIP: Provides access to an object (usually a set of pods) to everything else in the cluster. This means
					   that the object cannot be accessed from the outside world. Yaml syntax is the same except without 
					   nodePort.
	iii)	LoadBalancer: To get traffic into the node (and balances the workload?)
	iv)		Ingress: A controller to get traffic to certain nodes
- Deployment signals the master to create a set of identical pods (has replaced the old replica controllers). It also monitors the state of each pod, updating as necessary.
	i) 		The pods that it will create is being described by the template section.
	ii)		Replicas defines the number of pods it should create
	iii)	The Deployment does NOT actually create the pods. It asks the master to do it. Think of it as tapping on the master's 
			shoulders and telling the master what should be done to the pods.
	iv)		The Deployment has a selector:matchlabels section that links itself to the template section. So if an update is desired,
			it will tell the master to update those specific pods.
	v)		If we have changed an image and pushed it back to Docker Hub with the same name and tag (as in development step we usually do),
			we can't just do a kubectl apply -f <filename> command, since from kubectl's perspective nothing has changed. What we need to do
			in this case is to, unfortunately use an imperative command. First, update the source code. Next, build and push the new image to 
			docker hub with a new tag. Finally, run an imperative command. For instance, 
			-kubectl set image development/client-deployment client=stephengrider/multi-client:v5
- Volume is an object that allows a container to store data at the pod level. If the pod gets destroyed, the data is gone. Usually not what we use.
- Persistent volume is outside the pod. If a pod gets destroyed, the persistent volume is still there.
- apiVersion defines the set of "objects" useable